http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string:
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!ss");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json:
let resp = pm.response.json();
let name_check = resp.name;
let age_check = resp.age;
let salary_check = resp.salary;

4. Проверить, что name в ответе равно name s request (name вбить руками.):
pm.test("Name_check", function () {
    pm.expect(name_check).to.eql("Anna");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.):
pm.test("Age_check", function () {
    pm.expect(age_check).to.eql("28");
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.):
pm.test("Salary_check", function () {
    pm.expect(salary_check).to.eql(5000);
});

7. Спарсить request:
let req = request.data;
let name_req = req.name;
let age_req = req.age;
let salary_req = req.salary;

8. Проверить, что name в ответе равно name s request (name забрать из request.):
pm.test("Name_check_req", function () {
    pm.expect(name_req).to.eql(name_check);
});

9. Проверить, что age в ответе равно age s request (age забрать из request.):
pm.test("Age_check_req", function () {
    pm.expect(age_req).to.eql(age_check);
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.):
pm.test("Salary_check_req", function () {
    pm.expect(+salary_req).to.eql(+salary_check);
});

11. Вывести в консоль параметр family из response:
let response_family = pm.response.json();
console.log(response_family.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):
pm.test("1_5_year_salary_check", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.u_salary_1_5_year).to.eql(pm.environment.get("salary"*4));
});

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json:
let resp = pm.response.json();
let name_resp = resp.name;
let age_resp = resp.age;
let salary_resp = resp.salary;

4. Спарсить request:
let req = request.data;
let name_req = req.name;
let age_req = req.age;
let salary_req = req.salary;

5. Проверить, что name в ответе равно name s request (name забрать из request.):
pm.test("Name_test", function () {
    pm.expect(+name_resp).to.eql(+name_req);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.):
pm.test("Age_check", function () {
    pm.expect(age_resp).to.eql(age_req);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.):
pm.test("Salary_check", function () {
    pm.expect(+salary_resp).to.eql(+salary_req);
});

8. Вывести в консоль параметр family из response:
console.log (resp.family); 

9. Проверить, что у параметра dog есть параметры name:
pm.test("Name_property_check", function () {
    pm.expect(resp.family.pets.dog).to.have.property("name");
});

10. Проверить, что у параметра dog есть параметры age:
pm.test("Age_property_check", function () {
    pm.expect(resp.family.pets.dog).to.haveOwnProperty("age");
});

11. Проверить, что параметр name имеет значение Luky:
pm.test("Name_Luky_check", function () {
    pm.expect(resp.family.pets.dog).to.haveOwnProperty("name", "Luky");
});

12. Проверить, что параметр age имеет значение 4:
pm.test("Dog_age_check", function () {
    pm.expect(resp.family.pets.dog.age).to.eql(4);
});

============================================================================
http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json:
let resp = pm.response.json();
let name_resp = resp.name;
let age_resp = resp.age;
let salary_resp = resp.salary;

4. Спарсить request:
let req = pm.request.url.query.toObject();
let name_req = req.name;
let age_req = req.age;
let salary_req = req.salary;

5. Проверить, что name в ответе равно name s request (name забрать из request.):
pm.test("Name_check", function () {
    pm.expect(name_resp).to.eql(name_req);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.):
pm.test("Age_check", function () {
    pm.expect(+age_resp).to.eql(+age_req);
});

7. Вывести в консоль параметр salary из request:
console.log(salary_req);

8. Вывести в консоль параметр salary из response:
console.log(salary_resp);

9. Вывести в консоль 0-й элемент параметра salary из response:
console.log(salary_resp[0]);

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response:
console.log(salary_resp[1]);

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response:
console.log(salary_resp[2]);

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.):
pm.test("Salary_0_check", function () {
    pm.expect(+salary_resp[0]).to.eql(+salary_req);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.):
pm.test("Salary_1_check", function () {
    pm.expect(+salary_resp[1]).to.eql(+salary_req*2);
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.):
pm.test("Salary_2_check", function () {
    pm.expect(+salary_resp[2]).to.eql(salary_req*3);
});

15. Создать в окружении переменную name:
16. Создать в окружении переменную age:
17. Создать в окружении переменную salary:
18. Передать в окружение переменную name:
19. Передать в окружение переменную age:
20. Передать в окружение переменную salary:
pm.environment.set("name", name_resp);
pm.environment.set("age", age_resp);
pm.environment.set("salary", salary_resp);

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:
for (item in salary_resp) {
    console.log(salary_resp[item]);
};

=============================================================================

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

6. Спарсить response body в json:
let resp = pm.response.json();

7. Спарсить request:
let req = request.data;

8. Проверить, что json response имеет параметр start_qa_salary:
pm.test("Start_salary_property_test", function () {
    pm.expect(resp).to.haveOwnProperty("start_qa_salary");
});

9. Проверить, что json response имеет параметр qa_salary_after_6_months:
pm.test("Salary_after_6_month_property_check", function () {
    pm.expect(resp).to.haveOwnProperty("qa_salary_after_6_months");
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months:
pm.test("Salary_after_12_months_property_check", function () {
    pm.expect(resp).to.haveOwnProperty("qa_salary_after_12_months");
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year:
pm.test("Salary_after_1.5_year_property_check", function () {
    pm.expect(resp).to.haveOwnProperty("qa_salary_after_1.5_year");
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years:
pm.test("Salary_after_3.5_year_property_check", function () {
    pm.expect(resp).to.haveOwnProperty("qa_salary_after_3.5_years");
});

13. Проверить, что json response имеет параметр person:
pm.test("Person_property_check", function () {
    pm.expect(resp).to.haveOwnProperty("person");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.):
let salary_req = req.salary;
let start_qa_salary = resp.start_qa_salary;
pm.test("Check_1", function () {
    pm.expect(+start_qa_salary).to.eql(+salary_req);
});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.):
let qa_salary_after_6_month = resp.qa_salary_after_6_months;
pm.test("Check_2", function () {
    pm.expect(qa_salary_after_6_month).to.eql(salary_req * 2);
});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.):
pm.test("Check_3", function () {
    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary * 2.7);
});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.):
pm.test("Your test name", function () {
    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary * 3.3);
});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.):
pm.test("Check_5", function () {
    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary * 3.8);
});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.):
pm.test("Person_check", function () {
    pm.expect(+resp.person.u_name[1]).to.eql(+req.salary);
});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.):
pm.test("Age_check", function () {
    pm.expect(+resp.person.u_age).to.eql(+req.age);
});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.):
pm.test("Check_6", function () {
    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary * 4.2);
});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person:
for (item in resp.person) {
    console.log(resp.person[item]);
};