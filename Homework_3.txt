ДЗ_3 Postman
=====

1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе:
var schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "person": {
      "type": "object",
      "properties": {
        "u_age": {
          "type": "number"
        },
        "u_name": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "additionalItems": false
        },
        "u_salary_1_5_year": {
          "type": "number"
        }
      },
      "required": [
        "u_age",
        "u_name",
        "u_salary_1_5_year"
      ]
    },
    "qa_salary_after_12_months": {
      "type": "number"
    },
    "qa_salary_after_6_months": {
      "type": "number"
    },
    "start_qa_salary": {
      "type": "number"
    }
  },
  "required": [
    "person",
    "qa_salary_after_12_months",
    "qa_salary_after_6_months",
    "start_qa_salary"
  ]
};


pm.test("Validating_schema", function () {
    pm.response.to.have.jsonSchema(schema);
});

3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент:
let req = JSON.parse(request.data);
let sal_1 = req.salary * 2;
let sal_2 = req.salary * 2.9;
let sal_3 = req.salary * 4;
let sal_start = req.salary * 1;

let resp = pm.response.json();
let resp_1 = resp.qa_salary_after_6_months;
let resp_2 = resp.qa_salary_after_12_months;
let resp_3 = resp.person.u_salary_1_5_year;
let sal_start_resp = resp.start_qa_salary;

pm.test("Check_salary_after_6_months", function () {
    pm.expect(sal_1).to.eql(resp_1);
});

pm.test("Check_salary_after_12_months", function () {
    pm.expect(sal_2).to.eql(resp_2);
});

pm.test("Check_salary_person", function () {
    pm.expect(sal_3).to.eql(resp_3);
});

pm.test("Start_salary_check", function () {
    pm.expect(sal_start).to.eql(sal_start_resp);
});

4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user:
var salary_var = resp.person.u_salary_1_5_year;
pm.environment.set("salary_after_1_5_year", "salary_var");
===================

3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе:
var schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "age": {
      "type": "number"
    },
    "name": {
      "type": "string"
    },
    "salary": {
      "type": "array",
      "items": [
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "string"
        }
      ],
      "additionalItems": false
    }
  },
  "required": [
    "age",
    "name",
    "salary"
  ]
};
var schema = {
    "items": {
        "type": "boolean"
    }
};

pm.test('Schema is valid', function () {
    pm.response.to.have.jsonSchema(schema);
});

3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент:
let resp = pm.response.json();
let sal_1_1 = resp.salary;

let req = request.data;
let sal_1 = req.salary;
let sal_2 = req.salary * 2;
let sal_3 = req.salary * 3;

pm.test("Start_salary_test", function () {
    pm.expect(+sal_1_1[0]).to.eql(+sal_1);
});

pm.test("Salary_1_test", function () {
    pm.expect(+resp.salary[1]).to.eql(+req.salary * 2);
});

pm.test("Salary_2_test", function () {
    pm.expect(+resp.salary[2]).to.eql(+sal_3);
});

4) проверить, что 2-й элемент массива salary больше 1-го и 0-го:
pm.test("Salary_2_is_bigger_than_0", function () {
    pm.expect(+resp.salary[2]).to.be.greaterThan(+resp.salary[0]);
});

pm.test("Salary_2_is_bigger_than_1", function () {
    pm.expect(+resp.salary[2]).to.be.greaterThan(+resp.salary[1]);
});
===================

4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе:
var schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "age": {
      "type": "number"
    },
    "daily_food": {
      "type": "number"
    },
    "daily_sleep": {
      "type": "number"
    },
    "name": {
      "type": "string"
    }
  },
  "required": [
    "age",
    "daily_food",
    "daily_sleep",
    "name"
  ]
};

pm.test('Schema is valid', function () {
    pm.response.to.have.jsonSchema(schema);
});

3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент:
pm.test("Daily_food_check", function () {
    pm.expect(resp.daily_food).to.eql(req.weight * 0.012);
});

pm.test("Daily_sleep_check", function () {
    pm.expect(resp.daily_sleep).to.eql(req.weight * 2.5);
});

===================

5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе:
var schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "age": {
      "type": "string"
    },
    "family": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "additionalItems": false
          }
        },
        "u_salary_1_5_year": {
          "type": "number"
        }
      },
      "required": [
        "children",
        "u_salary_1_5_year"
      ]
    },
    "name": {
      "type": "string"
    },
    "salary": {
      "type": "number"
    }
  },
  "required": [
    "age",
    "family",
    "name",
    "salary"
  ]
};

pm.test('Schema is valid', function () {
    pm.response.to.have.jsonSchema(schema);
});

3) Проверить что занчение поля name = значению переменной name из окружения:
let resp = pm.response.json();
let req = request.data; 
let name_env = pm.environment.get("name");
pm.test("Name_check", function () {
    pm.expect(+name_env).to.eql(+resp.name);
});

4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age:
pm.test("Age_check", function () {
    pm.expect(resp.age).to.eql(req.age);
});

===================

6) http://162.55.220.72:5005/currency
req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос:
var resp = pm.response.json();
var array_length = resp.length;
var rand_obj = Math.floor(Math.random() * array_length);
var obj = resp[rand_obj];
var cur_id = obj.Cur_ID;

pm.test("Set_a_variable", function () {
    pm.environment.set("curID", "Cur_ID");
});

 ===================

7) http://162.55.220.72:5005/curr_byn
req.
POST
auth_token
curr_code: int

Resp.
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}

Тесты:
1) Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе:
var schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Generated schema for Root",
  "type": "object",
  "properties": {
    "Cur_Abbreviation": {
      "type": "string"
    },
    "Cur_ID": {
      "type": "number"
    },
    "Cur_Name": {
      "type": "string"
    },
    "Cur_OfficialRate": {
      "type": "number"
    },
    "Cur_Scale": {
      "type": "number"
    },
    "Date": {
      "type": "string"
    }
  },
  "required": [
    "Cur_Abbreviation",
    "Cur_ID",
    "Cur_Name",
    "Cur_OfficialRate",
    "Cur_Scale",
    "Date"
  ]
};

pm.test('Schema is valid', function () {
    pm.response.to.have.jsonSchema(schema);
});

===============
***
1) получить список валют:
2) итерировать список валют
3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты
4) если возвращается 500 код, переходим к следующей итреации
5) если получаем 200 код, проверяем response json на наличие поля "Cur_OfficialRate"
6) если поле есть, пишем в консоль инфу про фалюту в виде response
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}
7) переходим к следующей итерации

let currency_ = pm.response.json();
for (item in currency_) {
console.log(currency_[item]); 
};

let s = pm.response.json();

for (let i = 0; i < s.length; i++) {
  if (pm.response.to.have.status(200)){
       if (pm.response.to.haveOwnProperty('Cur_OfficialRate')) {
           console.log(s[i])
       };
  }
    }